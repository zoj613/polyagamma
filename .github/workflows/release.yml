# adapted from: https://github.com/pypa/cibuildwheel/tree/main/examples
name: Release

on:
  release:
    types: [ published ]

  workflow_dispatch:

jobs:
  build_wheels_and_sdist:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-20.04, macOS-10.15, windows-2019 ]
        python-version: [ '3.7' ]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache/restore poetry lockfile
        uses: actions/cache@v2
        with:
          path: .
          key: deps-${{ hashFiles('poetry.lock') }}
          restore-keys: deps-

      - name: Install Dependencies and Cythonize extension
        run: |
          python3 -m pip install --upgrade pip setuptools wheel poetry cibuildwheel==2.4.0
          poetry install --no-root
          poetry run cythonize polyagamma/*.pyx

      - name: Ensure openblas is installed on macOS for numpy
        if: matrix.os == 'macOS-10.15' && matrix.python-version != '3.10'
        run: |
          poetry cache clear --all numpy
          brew install openblas
          OPENBLAS="$(brew --prefix openblas)" poetry run pip install --force-reinstall numpy==1.19.0

      - name: Build wheels
        env:
          # skip pypy builds
          CIBW_SKIP: "pp* *-musllinux_x86_64 cp36-* cp38-win* cp39-win* cp310-win* cp310-manylinux* cp39-macosx* cp310-macosx*"
          CIBW_ARCHS_LINUX: "auto64"
          CIBW_ARCHS_MACOS: "x86_64"
          CIBW_ARCHS_WINDOWS: "auto64"
          CIBW_TEST_COMMAND: 'python -c "import polyagamma; print(polyagamma.random_polyagamma());"'
          BUILD_WHEEL: true
        run: poetry run cibuildwheel --output-dir wheelhouse

      - name: Build source distribution
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          poetry build -f sdist
          mv dist/*.gz wheelhouse

      - name: Store the wheelhouse directory
        uses: actions/upload-artifact@v2
        with:
          name: wheels_and_sdist
          path: wheelhouse
          if-no-files-found: error


  upload_pypi:
    needs: [ build_wheels_and_sdist ]
    runs-on: ubuntu-20.04
    steps:
      - name: Pull built wheels and sdist
        uses: actions/download-artifact@v2
        with:
          name: wheels_and_sdist
          path: wheelhouse

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: wheelhouse
